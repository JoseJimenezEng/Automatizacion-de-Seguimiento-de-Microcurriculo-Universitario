HTML

<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Automatización de Proceso de Reporte de Contenidos - Universidad Sergio Arboleda</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="styles.css">
    <!-- PDF.js -->
    <script src="https://cdn.jsdelivr.net/npm/pdfjs-dist@3.9.179/build/pdf.min.js"></script>
    <script>
        // Dónde buscar la librería
        pdfjsLib.GlobalWorkerOptions.workerSrc =
            'https://cdn.jsdelivr.net/npm/pdfjs-dist@3.9.179/build/pdf.worker.min.js';
    </script>

</head>

<body>
    
    <header class="header">
        <div class="header-content">
            <img src="https://www.usergioarboleda.edu.co/sergiointeractivo/wp-content/uploads/2020/03/kisspng-sergio-arboleda-university-logo-business-school-encuentro-colombiano-de-combinatoria-ecco-2-18-5b778e55a3c529.9334156515345618776708.png" alt="Logo Universidad Sergio Arboleda" class="logo">
            <div class="header-title">
                <h2>Facultad de Derecho</h2>
                <p>Sistema de Gestión Académica</p>
            </div>
        </div>
    </header>

    <div class="container">
        <h1>Automatización de Proceso de Reporte de Contenidos</h1>

        <div class="step-indicator">
            <div class="step active" id="step1">
                <div class="step-number">1</div>
                <div class="step-connector"></div>
                <div class="step-title">Subir Excel</div>
            </div>
            <div class="step" id="step2">
                <div class="step-number">2</div>
                <div class="step-connector"></div>
                <div class="step-title">Seleccionar Datos</div>
            </div>
            <div class="step" id="step3">
                <div class="step-number">3</div>
                <div class="step-connector"></div>
                <div class="step-title">Revisar Resultados</div>
            </div>
            <div class="step" id="step4">
                <div class="step-number">4</div>
                <div class="step-connector"></div>
                <div class="step-title">Subir Microdiseño</div>
            </div>
            <div class="step" id="step5">
                <div class="step-number">5</div>
                <div class="step-title">Enviar Reporte</div>
            </div>
        </div>

        <div class="section">
            <h2 class="section-title"><i class="fas fa-file-excel"></i> Paso 1: Subir archivo Excel de clases</h2>
            <div class="file-upload">
                <div class="file-input-container">
                    <input type="file" id="excelFile" class="file-input" accept=".xlsx, .xls">
                </div>
                <div id="excelFileName" class="file-name"></div>
            </div>
        </div>

        <div class="section">
            <h2 class="section-title"><i class="fas fa-filter"></i> Paso 2: Seleccionar Módulo y Docente</h2>
            <div class="dropdowns">
                <div class="dropdown-container">
                    <label for="moduleSelect">Módulo:</label>
                    <select id="moduleSelect" disabled>
                        <option value="">Seleccione un módulo</option>
                    </select>
                </div>
                <div class="dropdown-container">
                    <label for="teacherSelect">Docente:</label>
                    <select id="teacherSelect" disabled>
                        <option value="">Seleccione un docente</option>
                    </select>
                </div>
            </div>
        </div>

        <div id="resultsSection" class="section hidden">
            <h2 class="section-title"><i class="fas fa-table"></i> Paso 3: Resultados</h2>
            <div class="results">
                <table id="resultsTable">
                    <thead>
                        <tr>
                            <th>Módulo</th>
                            <th>Grupo</th>
                            <th>Docente</th>
                            <th>Fecha de Clase</th>
                            <th>Tema</th>
                            <th>Fecha Ingreso</th>
                            <th>Hrs. Clase</th>
                            <th>Hora Ingreso</th>
                        </tr>
                    </thead>
                    <tbody id="resultsBody"></tbody>
                </table>
            </div>
        </div>

        <div id="microdisenoSection" class="section hidden">
            <h2 class="section-title"><i class="fas fa-file-pdf"></i> Paso 4: Subir Microdiseño</h2>
            <div class="file-upload">
                <div class="file-input-container">
                    <input type="file" id="microdisenoFile" class="file-input" accept=".pdf, .doc, .docx">
                </div>
                <div id="microdisenoFileName" class="file-name"></div>
            </div>
        </div>

        <div id="submitSection" class="section hidden">
            <h2 class="section-title"><i class="fas fa-paper-plane"></i> Paso 5: Enviar Reporte</h2>
            <div class="file-upload">
                <button id="submitButton" disabled><i class="fas fa-upload"></i> Enviar Reporte</button>
            </div>
            <div id="message" class="message hidden"></div>
        </div>

        <!-- Sección de Webhook -->
        <div class="section webhook-section">
            <h2 class="section-title webhook-notification">
                <i class="fas fa-code"></i> Recepción de Datos (Webhook)
                <span id="notificationBadge" class="notification-badge hidden">0</span>
            </h2>

            <div class="webhook-status">
                <div class="status-indicator">
                    <div id="statusDot" class="status-dot offline"></div>
                    <span id="statusText" class="status-text">Webhook desconectado</span>
                </div>
                <div class="webhook-url-container">
                    <span class="webhook-url" id="webhookUrl">http://localhost:3000/webhook</span>
                    <button id="copyUrlBtn" class="copy-btn" title="Copiar URL"><i class="fas fa-copy"></i></button>
                </div>
            </div>

            <div id="webhookResults" class="webhook-results hidden">
                <h3>Resultados del Análisis:</h3>
                <div class="results">
                    <table id="webhookTable" class="webhook-table">
                        <thead>
                            <tr>
                                <th>Grupo</th>
                                <th>Fecha de Clase</th>
                                <th>Tema Dado</th>
                                <th>Tema Esperado</th>
                                <th>Semana</th>
                                <th>Estado</th>
                                <th>Observaciones</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody id="webhookTableBody"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para mostrar texto completo -->
    <div id="textModal" class="modal">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <h3 id="modalTitle" class="modal-title">Texto Completo</h3>
            <div id="modalBody" class="modal-body"></div>
            <div class="modal-footer">
                <button id="closeModalButton">Cerrar</button>
            </div>
        </div>
    </div>

    <footer class="footer">
        <div class="footer-content">
            <img src="https://www.usergioarboleda.edu.co/sergiointeractivo/wp-content/uploads/2020/03/kisspng-sergio-arboleda-university-logo-business-school-encuentro-colombiano-de-combinatoria-ecco-2-18-5b778e55a3c529.9334156515345618776708.png" alt="Logo Universidad Sergio Arboleda" class="footer-logo">
            <p>© 2025 Universidad Sergio Arboleda - Todos los derechos reservados</p>
            <p>Sistema de Automatización de Proceso de Reporte de Contenidos</p>
        </div>
    </footer>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="script.js"></script>
</body>

</html>



CSS 


:root {
    --primary-color: #00205B;
    /* Azul oscuro institucional */
    --secondary-color: #C8102E;
    /* Rojo institucional */
    --accent-color: #F2A900;
    /* Dorado/amarillo para acentos */
    --background-color: #f5f7fa;
    --text-color: #333;
    --border-color: #ddd;
    --success-color: #2ecc71;
    --error-color: #e74c3c;
    --card-bg: rgba(255, 255, 255, 0.95);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

body {
    background-color: var(--background-color);
    color: var(--text-color);
    line-height: 1.6;
    background-image: url('https://v0.blob.com/pjtmy8OGJ.png');
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
    position: relative;
}

body::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 32, 91, 0.85);
    /* Azul institucional con transparencia */
    z-index: -1;
}

.header {
    background-color: white;
    padding: 15px 0;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 30px;
    position: relative;
}

.header-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}

.logo {
    height: 70px;
}

.header-title {
    color: var(--primary-color);
    font-size: 1.2rem;
    text-align: right;
    max-width: 60%;
}

.container {
    max-width: 1200px;
    margin: 0 auto 50px auto;
    padding: 0 20px;
}

h1 {
    text-align: center;
    margin-bottom: 30px;
    color: white;
    font-size: 2.2rem;
    text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);
    position: relative;
    padding-bottom: 15px;
}

h1::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 100px;
    height: 3px;
    background-color: var(--secondary-color);
}

.section {
    margin-bottom: 30px;
    padding: 25px;
    border-radius: 8px;
    background-color: var(--card-bg);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    position: relative;
    overflow: hidden;
}

.section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 5px;
    height: 100%;
    background-color: var(--secondary-color);
}

.section-title {
    margin-bottom: 20px;
    font-size: 1.3rem;
    color: var(--primary-color);
    display: flex;
    align-items: center;
}

.section-title i {
    margin-right: 10px;
    color: var(--secondary-color);
}

.file-upload {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.file-input-container {
    position: relative;
    width: 100%;
    max-width: 400px;
    margin-bottom: 15px;
}

.file-input {
    width: 100%;
    padding: 12px;
    border: 2px dashed var(--primary-color);
    border-radius: 6px;
    cursor: pointer;
    text-align: center;
    background-color: rgba(0, 32, 91, 0.05);
    transition: all 0.3s ease;
}

.file-input:hover {
    background-color: rgba(0, 32, 91, 0.1);
}

.file-name {
    margin-top: 10px;
    font-size: 0.9rem;
    color: var(--primary-color);
    font-weight: 500;
}

.dropdowns {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    margin-bottom: 20px;
}

.dropdown-container {
    flex: 1;
    min-width: 250px;
}

label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
    color: var(--primary-color);
}

select {
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    background-color: white;
    cursor: pointer;
    transition: border-color 0.3s;
    color: var(--text-color);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
}

select:hover:not(:disabled) {
    border-color: var(--primary-color);
}

select:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(0, 32, 91, 0.2);
}

select:disabled {
    background-color: #f0f0f0;
    cursor: not-allowed;
    opacity: 0.7;
}

button {
    padding: 14px 28px;
    background-color: var(--secondary-color);
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 600;
    transition: all 0.3s;
    box-shadow: 0 4px 6px rgba(200, 16, 46, 0.2);
    display: flex;
    align-items: center;
    justify-content: center;
}

button i {
    margin-right: 8px;
}

button:hover:not(:disabled) {
    background-color: #a50d26;
    transform: translateY(-2px);
    box-shadow: 0 6px 8px rgba(200, 16, 46, 0.3);
}

button:active:not(:disabled) {
    transform: translateY(0);
    box-shadow: 0 2px 4px rgba(200, 16, 46, 0.3);
}

button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
    box-shadow: none;
}

.results {
    overflow-x: auto;
    border-radius: 6px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 15px;
    background-color: white;
}

th,
td {
    padding: 14px;
    text-align: left;
    border-bottom: 1px solid var(--border-color);
}

th {
    background-color: var(--primary-color);
    color: white;
    position: sticky;
    top: 0;
    font-weight: 600;
}

tr:nth-child(even) {
    background-color: rgba(0, 32, 91, 0.05);
}

tr:hover {
    background-color: rgba(0, 32, 91, 0.1);
}

.message {
    padding: 15px;
    margin: 15px 0;
    border-radius: 6px;
    text-align: center;
    font-weight: 500;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    justify-content: center;
}

.message i {
    margin-right: 10px;
    font-size: 1.2rem;
}

.success {
    background-color: #d4edda;
    color: #155724;
    border-left: 4px solid #28a745;
}

.error {
    background-color: #f8d7da;
    color: #721c24;
    border-left: 4px solid #dc3545;
}

.hidden {
    display: none;
}

.step-indicator {
    display: flex;
    justify-content: center;
    margin-bottom: 30px;
}

.step {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    flex: 1;
    max-width: 150px;
}

.step-number {
    width: 35px;
    height: 35px;
    border-radius: 50%;
    background-color: #e0e0e0;
    color: #666;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    margin-bottom: 8px;
    position: relative;
    z-index: 2;
}

.step-title {
    font-size: 0.85rem;
    color: #666;
    text-align: center;
}

.step.active .step-number {
    background-color: var(--secondary-color);
    color: white;
}

.step.active .step-title {
    color: white;
    font-weight: 600;
}

.step.completed .step-number {
    background-color: var(--success-color);
    color: white;
}

.step-connector {
    position: absolute;
    top: 17px;
    left: 50%;
    width: 100%;
    height: 2px;
    background-color: #e0e0e0;
    z-index: 1;
}

.step:first-child .step-connector {
    left: 50%;
    width: 50%;
}

.step:last-child .step-connector {
    width: 50%;
}

.step.completed .step-connector {
    background-color: var(--success-color);
}

.footer {
    background-color: var(--primary-color);
    color: white;
    text-align: center;
    padding: 20px;
    margin-top: 50px;
}

.footer-content {
    max-width: 1200px;
    margin: 0 auto;
}

.footer-logo {
    height: 50px;
    margin-bottom: 15px;
}

/* Estilos para la tabla de resultados del webhook */
.webhook-results {
    margin-top: 30px;
}

.webhook-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 15px;
    background-color: white;
}

.webhook-table th,
.webhook-table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid var(--border-color);
}

.webhook-table th {
    background-color: var(--primary-color);
    color: white;
    position: sticky;
    top: 0;
    font-weight: 600;
}

.webhook-table tr:nth-child(even) {
    background-color: rgba(0, 32, 91, 0.05);
}

.webhook-table tr:hover {
    background-color: rgba(0, 32, 91, 0.1);
}

.action-buttons {
    display: flex;
    gap: 10px;
    justify-content: center;
}

.btn-check,
.btn-x {
    padding: 8px;
    border-radius: 4px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    transition: all 0.2s;
}

.btn-check {
    background-color: var(--success-color);
    color: white;
}

.btn-check:hover {
    background-color: #27ae60;
}

.btn-x {
    background-color: var(--error-color);
    color: white;
}

.btn-x:hover {
    background-color: #c0392b;
}

.success-row {
    background-color: rgba(46, 204, 113, 0.1) !important;
}

.error-row {
    background-color: rgba(231, 76, 60, 0.1) !important;
}

.truncate {
    max-width: 200px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.expand-btn {
    background: none;
    border: none;
    color: var(--primary-color);
    cursor: pointer;
    padding: 0;
    margin-left: 5px;
    box-shadow: none;
}

.expand-btn:hover {
    color: var(--secondary-color);
    transform: none;
    box-shadow: none;
}

.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.5);
}

.modal-content {
    background-color: white;
    margin: 10% auto;
    padding: 20px;
    border-radius: 8px;
    width: 80%;
    max-width: 700px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
}

.close-modal {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
}

.close-modal:hover {
    color: black;
}

.modal-title {
    margin-bottom: 15px;
    color: var(--primary-color);
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 10px;
}

.modal-body {
    margin-bottom: 20px;
}

.modal-footer {
    text-align: right;
    border-top: 1px solid var(--border-color);
    padding-top: 15px;
}

.webhook-status {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 15px;
    background-color: rgba(0, 32, 91, 0.05);
    border-radius: 6px;
    margin-bottom: 20px;
}

.status-indicator {
    display: flex;
    align-items: center;
}

.status-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    margin-right: 8px;
}

.status-dot.online {
    background-color: var(--success-color);
    box-shadow: 0 0 8px rgba(46, 204, 113, 0.5);
}

.status-dot.offline {
    background-color: var(--error-color);
    box-shadow: 0 0 8px rgba(231, 76, 60, 0.5);
}

.status-text {
    font-weight: 500;
}

.webhook-url {
    font-family: monospace;
    padding: 8px 12px;
    background-color: rgba(0, 0, 0, 0.05);
    border-radius: 4px;
    font-size: 0.9rem;
}

.copy-btn {
    background: none;
    border: none;
    color: var(--primary-color);
    cursor: pointer;
    margin-left: 8px;
    padding: 4px 8px;
    border-radius: 4px;
    transition: all 0.2s;
    box-shadow: none;
}

.copy-btn:hover {
    background-color: rgba(0, 32, 91, 0.1);
    transform: none;
    box-shadow: none;
}

.notification-badge {
    position: absolute;
    top: -5px;
    right: -5px;
    background-color: var(--secondary-color);
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.7rem;
    font-weight: bold;
}

.webhook-notification {
    position: relative;
}

@media (max-width: 768px) {
    .header-content {
        flex-direction: column;
        text-align: center;
    }

    .header-title {
        text-align: center;
        max-width: 100%;
        margin-top: 10px;
    }

    .container {
        padding: 10px;
    }

    .section {
        padding: 15px;
    }

    .dropdowns {
        flex-direction: column;
        gap: 15px;
    }

    th,
    td {
        padding: 10px;
        font-size: 0.9rem;
    }

    .step-indicator {
        flex-wrap: wrap;
    }

    .step {
        margin-bottom: 15px;
    }

    .truncate {
        max-width: 100px;
    }

    .webhook-status {
        flex-direction: column;
        gap: 10px;
    }
}


JAVASCRIPT

// Variables globales
let row = 7
let excelData = []
let selectedModule = ""
let selectedTeacher = ""
let microdisenoUploaded = false
let currentStep = 1
let webhookData = null
let notificationCount = 0
let eventSource = null
// Añadir una variable global para almacenar el archivo de microdiseño
let microdisenoFile = null

// Elementos del DOM
const excelFileInput = document.getElementById("excelFile")
const excelFileName = document.getElementById("excelFileName")
const moduleSelect = document.getElementById("moduleSelect")
const teacherSelect = document.getElementById("teacherSelect")
const resultsSection = document.getElementById("resultsSection")
const resultsBody = document.getElementById("resultsBody")
const microdisenoSection = document.getElementById("microdisenoSection")
const microdisenoFileElement = document.getElementById("microdisenoFile")
const microdisenoFileName = document.getElementById("microdisenoFileName")
const submitSection = document.getElementById("submitSection")
const submitButton = document.getElementById("submitButton")
const messageDiv = document.getElementById("message")
const steps = document.querySelectorAll(".step")

// Elementos del webhook
const webhookResults = document.getElementById("webhookResults")
const webhookTableBody = document.getElementById("webhookTableBody")
const statusDot = document.getElementById("statusDot")
const statusText = document.getElementById("statusText")
const notificationBadge = document.getElementById("notificationBadge")
const copyUrlBtn = document.getElementById("copyUrlBtn")

// Elementos del modal
const textModal = document.getElementById("textModal")
const modalTitle = document.getElementById("modalTitle")
const modalBody = document.getElementById("modalBody")
const closeModalButton = document.getElementById("closeModalButton")
const closeModalX = document.querySelector(".close-modal")

// Event Listeners
excelFileInput.addEventListener("change", handleExcelUpload)
moduleSelect.addEventListener("change", handleModuleChange)
teacherSelect.addEventListener("change", handleTeacherChange)
microdisenoFileElement.addEventListener("change", handleMicrodisenoUpload)
submitButton.addEventListener("click", submitReport)
closeModalButton.addEventListener("click", closeModal)
closeModalX.addEventListener("click", closeModal)
copyUrlBtn.addEventListener("click", copyWebhookUrl)

// Inicializar conexión con el servidor de webhook
initWebhookConnection()

// Función para inicializar la conexión del webhook usando Server-Sent Events (SSE)
function initWebhookConnection() {
  // URL del servidor de webhook
  const serverUrl = "https://proyectousa.onrender.com"

  try {
    // Crear una conexión SSE
    eventSource = new EventSource(`${serverUrl}/events`)

    // Manejar el evento de conexión abierta
    eventSource.onopen = () => {
      console.log("Conexión SSE establecida")
      statusDot.classList.remove("offline")
      statusDot.classList.add("online")
      statusText.textContent = "Webhook conectado"
    }

    // Manejar el evento de mensaje recibido
    eventSource.addEventListener("webhook-data", (event) => {
      try {
        const data = JSON.parse(event.data)
        handleWebhookData(data)
      } catch (error) {
        console.error("Error al procesar los datos del webhook:", error)
      }
    })

    // Manejar errores de conexión
    eventSource.onerror = () => {
      console.error("Error en la conexión SSE")
      statusDot.classList.remove("online")
      statusDot.classList.add("offline")
      statusText.textContent = "Webhook desconectado"

      // Intentar reconectar después de 5 segundos
      setTimeout(() => {
        if (eventSource.readyState === EventSource.CLOSED) {
          initWebhookConnection()
        }
      }, 5000)
    }
  } catch (error) {
    console.error("Error al inicializar la conexión SSE:", error)
    statusDot.classList.remove("online")
    statusDot.classList.add("offline")
    statusText.textContent = "Error de conexión"

    // Para fines de demostración, simular la recepción de datos después de 5 segundos
    setTimeout(simulateWebhookData, 5000)
  }
}

// Función para simular la recepción de datos (solo para demostración)
function simulateWebhookData() {
  // Datos de ejemplo
  const exampleData = {
    "DERE0042-R02": [
      {
        temaDado:
          "Presentación del Micro currículo, socialización Tema: Introducción a la Historia de la Filosofía del Derecho Concepto – utilidad- objeto -relación con otras ciencias",
        temaEsperado: "Bienvenida al curso y presentación de la clase y presentación del contenido programático",
        success: true,
        week: "02/06/2025 - 02/07/2025",
        dateOfClass: "2/6/2025",
        observations: "None",
      },
      {
        temaDado: "Concepto de Filosofía del Derecho",
        temaEsperado: "Concepto de Filosofía del Derecho",
        success: true,
        week: "02/13/2025 - 02/14/2025",
        dateOfClass: "2/13/2025",
        observations: "None",
      },
    ],
    "DERE0042-R03": [
      {
        temaDado: "Introducción a la materia",
        temaEsperado: "Presentación del curso y metodología",
        success: false,
        week: "02/06/2025 - 02/07/2025",
        dateOfClass: "2/7/2025",
        observations: "None",
      },
    ],
  }

  // Procesar los datos simulados
  handleWebhookData(exampleData)

  // Cambiar el estado a conectado
  statusDot.classList.remove("offline")
  statusDot.classList.add("online")
  statusText.textContent = "Webhook conectado (simulado)"
}

// Función para manejar los datos recibidos por el webhook
function handleWebhookData(data) {
  webhookData = data

  // Incrementar contador de notificaciones
  notificationCount++
  notificationBadge.textContent = notificationCount
  notificationBadge.classList.remove("hidden")

  // Mostrar los datos en la tabla
  displayWebhookData(data)

  // Mostrar la sección de resultados
  webhookResults.classList.remove("hidden")

  // Mostrar mensaje de notificación
  showMessage('<i class="fas fa-bell"></i> Nuevos datos recibidos por webhook', "success")
}

// Función para actualizar el indicador de pasos
function updateStepIndicator(step) {
  currentStep = step

  steps.forEach((stepEl, index) => {
    const stepNum = index + 1

    if (stepNum < step) {
      stepEl.classList.add("completed")
      stepEl.classList.remove("active")
    } else if (stepNum === step) {
      stepEl.classList.add("active")
      stepEl.classList.remove("completed")
    } else {
      stepEl.classList.remove("active", "completed")
    }
  })
}

// Función para manejar la carga del archivo Excel
function handleExcelUpload(event) {
  const file = event.target.files[0]
  if (!file) return

  excelFileName.textContent = file.name

  const reader = new FileReader()
  reader.onload = (e) => {
    try {
      const data = new Uint8Array(e.target.result)
      // XLSX ya está disponible globalmente desde el script en el HTML
      const workbook = XLSX.read(data, { type: "array" })

      // Asumimos que los datos están en la primera hoja
      const firstSheetName = workbook.SheetNames[0]
      const worksheet = workbook.Sheets[firstSheetName]

      // Convertir a JSON
      excelData = XLSX.utils.sheet_to_json(worksheet, { header: 1 })

      // Verificar si hay datos y si tienen el formato esperado
      if (excelData.length < 2) {
        showMessage("El archivo no contiene datos suficientes", "error")
        return
      }

      // Asumimos que la primera fila son los encabezados
      const headers = excelData[0]

      // Verificar si los encabezados son los esperados
      const expectedHeaders = [
        "Módulo",
        "Grupo",
        "Docente",
        "Fecha de Clase",
        "Tema",
        "Fecha Ingreso",
        "Hrs. Clase",
        "Hora Ingreso",
      ]
      const hasExpectedFormat = expectedHeaders.every((header) => headers.includes(header))

      if (!hasExpectedFormat) {
        showMessage("El formato del archivo no es el esperado", "error")
        return
      }

      // Procesar los datos para obtener módulos y docentes únicos
      processExcelData()

      // Actualizar el indicador de pasos
      updateStepIndicator(2)
    } catch (error) {
      console.error("Error al procesar el archivo:", error)
      showMessage("Error al procesar el archivo. Asegúrese de que sea un archivo Excel válido.", "error")
    }
  }

  reader.readAsArrayBuffer(file)
}

// Función para procesar los datos del Excel
function processExcelData() {
  if (excelData.length < 2) return

  const headers = excelData[0]
  const moduleIndex = headers.indexOf("Módulo")
  const teacherIndex = headers.indexOf("Docente")

  if (moduleIndex === -1 || teacherIndex === -1) {
    showMessage("No se encontraron las columnas de Módulo o Docente", "error")
    return
  }

  // Obtener módulos y docentes únicos
  const uniqueModules = new Set()
  const uniqueTeachers = new Set()

  for (let i = 1; i < excelData.length; i++) {
    const row = excelData[i]
    if (row[moduleIndex] && row[teacherIndex]) {
      uniqueModules.add(row[moduleIndex])
      uniqueTeachers.add(row[teacherIndex])
    }
  }

  // Llenar los dropdowns
  populateDropdown(moduleSelect, Array.from(uniqueModules).sort())
  populateDropdown(teacherSelect, Array.from(uniqueTeachers).sort())

  // Habilitar los dropdowns
  moduleSelect.disabled = false
  teacherSelect.disabled = false

  showMessage(
    '<i class="fas fa-check-circle"></i> Archivo procesado correctamente. Seleccione un módulo y un docente.',
    "success",
  )
}

// Función para llenar un dropdown
function populateDropdown(selectElement, options) {
  // Limpiar opciones existentes excepto la primera
  while (selectElement.options.length > 1) {
    selectElement.remove(1)
  }

  // Agregar nuevas opciones
  options.forEach((option) => {
    const optionElement = document.createElement("option")
    optionElement.value = option
    optionElement.textContent = option
    selectElement.appendChild(optionElement)
  })
}

// Función para manejar el cambio de módulo
function handleModuleChange() {
  selectedModule = moduleSelect.value
  updateResults()
}

// Función para manejar el cambio de docente
function handleTeacherChange() {
  selectedTeacher = teacherSelect.value
  updateResults()
}

// Función para actualizar los resultados
function updateResults() {
  if (!selectedModule || !selectedTeacher) {
    resultsSection.classList.add("hidden")
    microdisenoSection.classList.add("hidden")
    submitSection.classList.add("hidden")
    return
  }

  // Filtrar datos según el módulo y docente seleccionados
  const headers = excelData[0]
  const moduleIndex = headers.indexOf("Módulo")
  const teacherIndex = headers.indexOf("Docente")

  const filteredData = excelData
    .slice(1)
    .filter((row) => row[moduleIndex] === selectedModule && row[teacherIndex] === selectedTeacher)

  // Mostrar resultados
  resultsBody.innerHTML = ""

  if (filteredData.length === 0) {
    const row = document.createElement("tr")
    const cell = document.createElement("td")
    cell.colSpan = headers.length
    cell.textContent = "No se encontraron resultados para esta combinación de módulo y docente."
    cell.style.textAlign = "center"
    row.appendChild(cell)
    resultsBody.appendChild(row)
  } else {
    filteredData.forEach((rowData) => {
      const row = document.createElement("tr")

      headers.forEach((header, index) => {
        const cell = document.createElement("td")
        cell.textContent = rowData[index] || ""
        row.appendChild(cell)
      })

      resultsBody.appendChild(row)
    })
  }

  // Mostrar secciones
  resultsSection.classList.remove("hidden")
  microdisenoSection.classList.remove("hidden")
  submitSection.classList.remove("hidden")

  // Actualizar el indicador de pasos
  updateStepIndicator(3)
}
async function extractPdfText(file) {
    const arrayBuffer = await file.arrayBuffer();
    const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
    let fullText = "";
    for (let i = 1; i <= pdf.numPages; i++) {
      const page = await pdf.getPage(i);
      const content = await page.getTextContent();
      const strings = content.items.map(item => item.str);
      fullText += strings.join(" ") + "\n\n";
    }
    return fullText;
  }
  
// Modificar la función handleMicrodisenoUpload para guardar el archivo
async function handleMicrodisenoUpload(event) {
    event.preventDefault();
    const file = event.target.files[0];
    if (!file) return;
    webhookTableBody.innerHTML = "";

    microdisenoFile = file;
    microdisenoFileName.textContent = file.name;
    microdisenoUploaded = true;
    updateSubmitButton();
    updateStepIndicator(4);
  
    // Aquí extraemos y mostramos el texto
    try {
      const texto = await extractPdfText(file);
      
    } catch (err) {
      console.error("Error al extraer texto del PDF:", err);
    }
  }
  
// Función para actualizar el estado del botón de envío
function updateSubmitButton() {
  submitButton.disabled = !(selectedModule && selectedTeacher && microdisenoUploaded)

  if (!submitButton.disabled) {
    updateStepIndicator(5)
  }
}

// Modificar la función submitReport para incluir el contenido del microdiseño como string
async function submitReport() {
    row = 7
    if (!selectedModule || !selectedTeacher) {
      showMessage('<i class="fas fa-exclamation-triangle"></i> Debe seleccionar un módulo y un docente', "error");
      return;
    }
    if (!microdisenoFile) {
      showMessage('<i class="fas fa-exclamation-triangle"></i> Debe subir el archivo de microdiseño', "error");
      return;
    }
  
    showMessage('<i class="fas fa-spinner fa-spin"></i> Procesando y enviando reporte...', "success");
  
    try {
      // Extraemos el texto del PDF
      const textoExtraido = await extractPdfText(microdisenoFile);
      console.log("Texto extraído del PDF:", textoExtraido);
  
      // Preparamos el payload con el texto legible
      const payload = {
        modulo: selectedModule,
        docente: selectedTeacher,
        microdiseno: {
          nombre: microdisenoFile.name,
          tipo: microdisenoFile.type,
          contenido: textoExtraido    // <-- aquí va el texto legible
        }
      };
  
      const res = await fetch("https://hook.us2.make.com/y1tdc65uhvgp5o5plum5bw10or62dld9", {
        method: "POST",
        headers: { "Content-Type": "application/json; charset=utf-8" },
        body: JSON.stringify(payload)
      });
      if (!res.ok) throw new Error("Error en la respuesta del servidor");
  
      await res.text();
      showMessage('<i class="fas fa-check-circle"></i> Reporte enviado correctamente', "success");
      steps.forEach(s => { s.classList.add("completed"); s.classList.remove("active"); });
    } catch (err) {
      console.error("Error en submitReport:", err);
      showMessage('<i class="fas fa-exclamation-circle"></i> Error al enviar el reporte: ' + err.message, "error");
    }
  }
// Función para mostrar mensajes
function showMessage(text, type) {
  messageDiv.innerHTML = text
  messageDiv.className = "message " + type
  messageDiv.classList.remove("hidden")

  // Ocultar el mensaje después de 5 segundos si es un mensaje de éxito
  if (type === "success") {
    setTimeout(() => {
      messageDiv.classList.add("hidden")
    }, 5000)
  }
}

// Función para mostrar los datos del webhook en la tabla
function displayWebhookData(data) {
  webhookTableBody.innerHTML = ""

  // Iterar sobre cada grupo en los datos
  for (const groupId in data) {
    const groupData = data[groupId]

    // Iterar sobre cada entrada en el grupo
    groupData.forEach((entry) => {
      const row = document.createElement("tr")

      // Aplicar clase según el estado de éxito
      if (entry.success) {
        row.classList.add("success-row")
      } else {
        row.classList.add("error-row")
      }

      // Crear celdas para cada columna
      // Grupo
      const groupCell = document.createElement("td")
      groupCell.textContent = groupId
      row.appendChild(groupCell)

      // Fecha de Clase
      const dateCell = document.createElement("td")
      dateCell.textContent = entry.dateOfClass || ""
      row.appendChild(dateCell)

      // Tema Dado (con truncado y botón para expandir)
      const temaDadoCell = document.createElement("td");
      temaDadoCell.textContent = entry.temaDado || "";
      row.appendChild(temaDadoCell);


      // Tema Esperado (con truncado y botón para expandir)
      const temaEsperadoCell = document.createElement("td");
      temaEsperadoCell.textContent = entry.temaEsperado || "";
      row.appendChild(temaEsperadoCell);

      // Semana
      const weekCell = document.createElement("td")
      weekCell.textContent = entry.week || ""
      row.appendChild(weekCell)

      // Estado
      const statusCell = document.createElement("td")
      if (entry.success) {
        statusCell.innerHTML = '<i class="fas fa-check-circle" style="color: var(--success-color);"></i> Coherencia'
      } else {
        statusCell.innerHTML = '<i class="fas fa-times-circle" style="color: var(--error-color);"></i> Incoherencia'
      }
      row.appendChild(statusCell)

      // Observaciones
      const obsCell = document.createElement("td")
      obsCell.textContent = entry.observations || "None"
      row.appendChild(obsCell)

      // Acciones (botones de check y x)
      const actionsCell = document.createElement("td")
      const actionsDiv = document.createElement("div")
      actionsDiv.className = "action-buttons"

      // Botón de check
      const checkBtn = document.createElement("button")
      checkBtn.className = "btn-check"
      checkBtn.innerHTML = '<i class="fas fa-check"></i>'
      checkBtn.onclick = () => {sendActionRequest(groupId, entry, false);   row.remove()}   // elimina la fila al aprobar

      actionsDiv.appendChild(checkBtn)

      // Botón de x
      const xBtn = document.createElement("button")
      xBtn.className = "btn-x"
      xBtn.innerHTML = '<i class="fas fa-times"></i>'
      xBtn.onclick = () => {sendActionRequest(groupId, entry, true);   row.remove() }  // elimina la fila al aprobar
      actionsDiv.appendChild(xBtn)

      actionsCell.appendChild(actionsDiv)
      row.appendChild(actionsCell)

      // Agregar la fila a la tabla
      webhookTableBody.appendChild(row)
    })
  }
}

// Función para enviar la solicitud de acción (check o x)
function sendActionRequest(groupId, entry, color) {
  // Crear objeto con los datos a enviar
  const data = {
    ...entry,
    groupId: groupId,
    color: color,
    modulo: selectedModule,
    docente: selectedTeacher,
    row: row++,
  }

  // Mostrar mensaje de carga
  showMessage('<i class="fas fa-spinner fa-spin"></i> Enviando acción...', "success")

  // AQUÍ ES DONDE SE DEBE COLOCAR LA URL PARA LA SOLICITUD POST
  const postUrl = "https://hook.us2.make.com/m4sw3hygyr8rh33ishohc6f1l2c6rim1"

  // Enviar datos al webhook
  fetch(postUrl, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  })
    .then((response) => {
      if (!response.ok) {
        throw new Error("Error en la respuesta del servidor")
      }
      return response.text()
    })
    .then((result) => {
      showMessage(
        `<i class="fas fa-check-circle"></i> Acción ${color ? "rechazar" : "aprobar"} enviada correctamente`,
        "success",
      )
    })
    .catch((error) => {
      console.error("Error al enviar la acción:", error)
      showMessage('<i class="fas fa-exclamation-circle"></i> Error al enviar la acción: ' + error.message, "error")
    })
}

// Función para mostrar el modal con texto completo
function showTextModal(title, text) {
  modalTitle.textContent = title
  modalBody.textContent = text
  textModal.style.display = "block"
}

// Función para cerrar el modal
function closeModal() {
  textModal.style.display = "none"
}

// Función para copiar la URL del webhook
function copyWebhookUrl() {
  const webhookUrl = document.getElementById("webhookUrl")
  navigator.clipboard
    .writeText(webhookUrl.textContent)
    .then(() => {
      copyUrlBtn.innerHTML = '<i class="fas fa-check"></i>'
      setTimeout(() => {
        copyUrlBtn.innerHTML = '<i class="fas fa-copy"></i>'
      }, 2000)
    })
    .catch((err) => {
      console.error("Error al copiar: ", err)
    })
}

// Cerrar el modal si se hace clic fuera de él
window.onclick = (event) => {
  if (event.target === textModal) {
    closeModal()
  }
}

// Limpiar la conexión SSE cuando se cierra la página
window.addEventListener("beforeunload", () => {
  if (eventSource) {
    eventSource.close()
  }
})

// Inicializar el indicador de pasos
updateStepIndicator(1)



WEBHOOK


// Este archivo debe ser ejecutado en un servidor Node.js para recibir webhooks
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const app = express();
const port = process.env.PORT || 3000;

// Almacenamiento en memoria para los datos recibidos (en un entorno real, usarías una base de datos)
let webhookData = {};
// Clientes conectados para SSE
const clients = [];

// Middleware para procesar JSON y habilitar CORS
app.use(bodyParser.text({ type: '*/*' })); // Recibir como texto para procesar los delimitadores
app.use(cors());

// Endpoint para SSE (Server-Sent Events)
app.get('/events', (req, res) => {
    // Configurar cabeceras para SSE
    res.writeHead(200, {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive'
    });
    
    // Enviar un evento inicial para confirmar la conexión
    res.write('event: connected\ndata: {"status": "connected"}\n\n');
    
    // Añadir cliente a la lista
    const clientId = Date.now();
    const newClient = {
        id: clientId,
        res
    };
    clients.push(newClient);
    
    // Enviar datos existentes si hay alguno
    if (Object.keys(webhookData).length > 0) {
        const dataStr = JSON.stringify(webhookData);
        res.write(`event: webhook-data\ndata: ${dataStr}\n\n`);
    }
    
    // Eliminar cliente cuando se cierre la conexión
    req.on('close', () => {
        console.log(`Cliente ${clientId} desconectado`);
        const index = clients.findIndex(client => client.id === clientId);
        if (index !== -1) {
            clients.splice(index, 1);
        }
    });
});

// Endpoint para recibir el webhook
app.post('/webhook', (req, res) => {
    try {
        // Obtener el cuerpo de la solicitud como string
        let jsonString = req.body;
        
        // Eliminar los delimitadores ```json y ``` si existen
        if (jsonString.startsWith('```json')) {
            jsonString = jsonString.substring('```json'.length);
        }
        if (jsonString.endsWith('```')) {
            jsonString = jsonString.substring(0, jsonString.length - 3);
        }
        
        // Parsear el JSON
        const data = JSON.parse(jsonString);
        
        // Añadir campo "observations" a cada elemento si no existe
        for (const groupId in data) {
            data[groupId].forEach(item => {
                if (!item.hasOwnProperty('observations')) {
                    item.observations = "None";
                }
            });
        }
        
        // Guardar los datos
        webhookData = data;
        
        // Notificar a todos los clientes conectados
        sendEventToAll('webhook-data', data);
        
        // Enviar respuesta
        res.status(200).json({
            success: true,
            message: 'Datos recibidos y procesados correctamente',
            data: data
        });
        
    } catch (error) {
        console.error('Error al procesar el webhook:', error);
        res.status(400).json({
            success: false,
            message: 'Error al procesar los datos',
            error: error.message
        });
    }
});

// Endpoint para recibir acciones (check/x)
app.post('/action', (req, res) => {
    try {
        // Obtener el cuerpo de la solicitud
        let jsonString = req.body;
        
        // Si es un string, parsearlo
        let data;
        if (typeof jsonString === 'string') {
            data = JSON.parse(jsonString);
        } else {
            data = jsonString;
        }
        
        // Procesar la acción (en un entorno real, esto podría actualizar una base de datos)
        console.log(`Acción recibida: ${data.color ? 'Rechazar' : 'Aprobar'} para grupo ${data.groupId}`);
        
        // Actualizar los datos en memoria
        if (webhookData[data.groupId]) {
            const index = webhookData[data.groupId].findIndex(item => 
                item.dateOfClass === data.dateOfClass && 
                item.temaDado === data.temaDado
            );
            
            if (index !== -1) {
                // Actualizar el estado según la acción
                webhookData[data.groupId][index].success = !data.color;
                // Actualizar observaciones
                webhookData[data.groupId][index].observations = 
                    data.color ? "Rechazado manualmente" : "Aprobado manualmente";
                
                // Notificar a todos los clientes conectados sobre el cambio
                sendEventToAll('webhook-data', webhookData);
            }
        }
        
        // Enviar respuesta
        res.status(200).json({
            success: true,
            message: `Acción ${data.color ? 'rechazar' : 'aprobar'} procesada correctamente`
        });
        
    } catch (error) {
        console.error('Error al procesar la acción:', error);
        res.status(400).json({
            success: false,
            message: 'Error al procesar la acción',
            error: error.message
        });
    }
});

// Función para enviar eventos a todos los clientes conectados
function sendEventToAll(eventName, data) {
    clients.forEach(client => {
        client.res.write(`event: ${eventName}\ndata: ${JSON.stringify(data)}\n\n`);
    });
}

// Iniciar el servidor
app.listen(port, () => {
    console.log(`Servidor webhook escuchando en el puerto ${port}`);
    console.log(`Endpoint SSE disponible en http://localhost:${port}/events`);
    console.log(`Endpoint webhook disponible en http://localhost:${port}/webhook`);
});